services:
  express:
    build:
      context: .
      dockerfile: backend/services/auth/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - PORT=${PORT}
      - JWT_SECRET=${JWT_SECRET}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DATABASE=${POSTGRES_DATABASE}
      - POSTGRES_HOST_DB=${POSTGRES_HOST_DB}
      - POSTGRES_PORT=${POSTGRES_PORT}
    networks:
      - app-network
    depends_on:
      - postgres

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  express-location:
    build:
      context: .
      dockerfile: backend/services/location/Dockerfile
    ports:
      - "3001:3001"
    environment:
      - PORT_LOCATION=${PORT_LOCATION}
      - JWT_SECRET=${JWT_SECRET}
      - MONGO_USERNAME=${MONGO_USERNAME}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - MONGO_HOST=${MONGO_HOST}
      - MONGO_PORT=${MONGO_PORT}
      - MONGO_DATABASE=${MONGO_DATABASE}
    networks:
      - app-network
    depends_on:
      - mongo_db

  mongo_db:
    image: mongo:latest
    container_name: mongo_container
    ports:
      - "${MONGO_PORT}:${MONGO_PORT}"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    volumes:
      - mongo_data:/data/db
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  mongo_data: